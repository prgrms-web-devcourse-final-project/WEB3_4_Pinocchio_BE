name: CI - Test and Build Docker Image  # CI/CD 파이프라인 이름 설정

on:
    push:
        branches: [ main ]  # main 브랜치에 푸시되었을 때만 트리거

jobs:
    test-with-dbs:  # 데이터베이스 서비스를 위한 테스트 실행 작업
        runs-on: ubuntu-latest  # GitHub Actions의 실행 환경은 최신 Ubuntu 사용

        services:
            mysql:
                image: mysql:8  # MySQL 8버전 이미지를 사용
                env:
                    MYSQL_ROOT_PASSWORD: root  # MySQL 루트 비밀번호 설정
                    MYSQL_DATABASE: test_db  # 데이터베이스 이름 설정
                ports:
                    - 3306:3306  # MySQL 포트 3306 노출
                options: >-
                    --health-cmd="mysqladmin ping --silent"  # MySQL 헬스체크 설정
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

            mongo:
                image: mongo:5  # MongoDB 5버전 이미지를 사용
                env:
                    MONGO_INITDB_ROOT_USERNAME: root  # MongoDB 초기 루트 사용자 설정
                    MONGO_INITDB_ROOT_PASSWORD: root  # MongoDB 루트 비밀번호 설정
                ports:
                    - 27017:27017  # MongoDB 포트 27017 노출
                options: >-
                    --health-cmd="echo 'db.runCommand({ ping: 1 })' | mongo localhost/test --quiet"  # MongoDB 헬스체크 설정
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

            redis:
                image: redis:6  # Redis 6버전 이미지를 사용
                ports:
                    - 6379:6379  # Redis 포트 6379 노출

        steps:
            - name: Checkout code  # 코드 체크아웃
              uses: actions/checkout@v3  # GitHub에서 리포지토리 코드를 받아옵니다

            - name: Set up JDK 21  # JDK 21 환경 설정
              uses: actions/setup-java@v3  # JDK 설치 액션 사용
              with:
                  distribution: 'temurin'  # JDK 배포판 선택
                  java-version: '21'  # 사용할 JDK 버전

            - name: Grant permission to gradlew  # gradlew에 실행 권한 부여
              run: chmod +x gradlew  # gradlew 파일에 실행 권한 부여

            - name: Run integration tests only  # 통합 테스트 실행
              run: ./gradlew test -Dspring.profiles.active=ci  # 테스트 실행
              env:
                  SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/test_db  # MySQL 연결 URL
                  SPRING_DATASOURCE_USERNAME: root  # MySQL 사용자 이름
                  SPRING_DATASOURCE_PASSWORD: root  # MySQL 비밀번호
                  SPRING_DATA_MONGODB_URI: mongodb://root:root@localhost:27017/test?authSource=admin  # MongoDB URI
                  SPRING_REDIS_HOST: localhost  # Redis 호스트
                  SPRING_REDIS_PORT: 6379  # Redis 포트

    build-and-push:  # 빌드 후 Docker 이미지로 푸시하는 작업
        runs-on: ubuntu-latest  # GitHub Actions의 실행 환경은 최신 Ubuntu 사용
        needs: test-with-dbs  # 이전의 test-with-dbs 작업이 완료된 후에 실행

        steps:
            - name: Checkout code  # 코드 체크아웃
              uses: actions/checkout@v3  # GitHub에서 리포지토리 코드를 받아옵니다

            - name: Set up JDK 21  # JDK 21 환경 설정
              uses: actions/setup-java@v3  # JDK 설치 액션 사용
              with:
                  distribution: 'temurin'  # JDK 배포판 선택
                  java-version: '21'  # 사용할 JDK 버전

            - name: Grant permission for gradlew  # gradlew에 실행 권한 부여
              run: chmod +x gradlew  # gradlew 파일에 실행 권한 부여

            # 1. Install Node.js & npm (for React)
            - name: Set up Node.js  # Node.js 및 npm 환경 설정
              uses: actions/setup-node@v3  # Node.js 설치 액션 사용
              with:
                  node-version: '20'  # Node.js 버전 설정

            # 2. Install dependencies & build React app
            - name: Install and build React frontend  # React 앱 의존성 설치 및 빌드
              working-directory: ./frontend  # 프론트엔드 디렉토리로 이동
              run: |
                  npm ci  # npm 의존성 설치
                  npm run build  # React 앱 빌드

            # 3. Copy frontend build to Spring Boot static folder
            - name: Copy frontend build to Spring static folder  # 빌드된 React 앱을 Spring Boot의 static 폴더로 복사
              run: |
                  mkdir -p ./src/main/resources/static  # static 폴더가 없으면 생성
                  rm -rf ./src/main/resources/static/*  # 기존 파일 삭제
                  cp -r ./frontend/build/* ./src/main/resources/static/  # React 빌드를 static 폴더로 복사

            # 4. Build backend JAR
            - name: Build Spring Boot app with Gradle  # Spring Boot 백엔드 JAR 빌드
              run: ./gradlew clean build -x test -Dspring.profiles.active=ci  # 테스트 제외하고 빌드

            # 5. Set Docker Tag
            - name: Set Docker Tag with Korea Time (KST)  # Docker 이미지 태그 설정 (한국 시간 기준)
              id: set_tag
              run: echo "tag_time=$(TZ=Asia/Seoul date +'%Y-%m-%d-%H%M')" >> $GITHUB_OUTPUT

            - name: Log in to DockerHub  # DockerHub 로그인
              run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin  # DockerHub에 로그인

            # 6. Build Docker image
            - name: Build Docker Image with datetime tag  # Docker 이미지 빌드
              run: |
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-app:latest \  # 최신 태그로 빌드
                               -t ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ steps.set_tag.outputs.tag_time }} .  # 시간 태그로 빌드

            - name: Push Docker Images  # Docker 이미지 푸시
              run: |
                  docker push ${{ secrets.DOCKER_USERNAME }}/spring-app:latest  # 최신 이미지 푸시
                  docker push ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ steps.set_tag.outputs.tag_time }}  # 시간 태그 이미지 푸시
