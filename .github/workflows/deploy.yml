name: CI - Test and Build Docker Image # CI 이름

on:
    push:
        branches: [ main ] # main 브랜치에 푸시될 때만 실행됨

jobs:
    test-with-dbs: # 테스트 및 DB 연동 잡
        runs-on: ubuntu-latest # GitHub 제공 최신 우분투 환경에서 실행

        services:
            mysql: # MySQL 서비스 설정
                image: mysql:8
                env:
                    MYSQL_ROOT_PASSWORD: root
                    MYSQL_DATABASE: test_db
                ports:
                    - 3306:3306
                options: >-
                    --health-cmd="mysqladmin ping --silent"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

            mongo: # MongoDB 서비스 설정
                image: mongo:5
                env:
                    MONGO_INITDB_ROOT_USERNAME: root
                    MONGO_INITDB_ROOT_PASSWORD: root
                ports:
                    - 27017:27017
                options: >-
                    --health-cmd="echo 'db.runCommand({ ping: 1 })' | mongo localhost/test --quiet"
                    --health-interval=10s
                    --health-timeout=5s
                    --health-retries=5

            redis: # Redis 서비스 설정
                image: redis:6
                ports:
                    - 6379:6379

        steps:
            - name: 코드 체크아웃
              uses: actions/checkout@v3

            - name: JDK 21 설치
              uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: '21'

            - name: gradlew 권한 부여
              run: chmod +x gradlew

            - name: 통합 테스트 실행
              run: ./gradlew test -Dspring.profiles.active=ci
              env:
                  SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/test_db
                  SPRING_DATASOURCE_USERNAME: root
                  SPRING_DATASOURCE_PASSWORD: root
                  SPRING_DATA_MONGODB_URI: mongodb://root:root@localhost:27017/test?authSource=admin
                  SPRING_REDIS_HOST: localhost
                  SPRING_REDIS_PORT: 6379

    build-and-push: # 빌드 및 Docker Hub 푸시 작업
        runs-on: ubuntu-latest
        needs: test-with-dbs # 위의 잡이 성공해야 실행됨

        steps:
            - name: 코드 체크아웃
              uses: actions/checkout@v3

            - name: JDK 21 설치
              uses: actions/setup-java@v3
              with:
                  distribution: 'temurin'
                  java-version: '21'

            - name: gradlew 권한 부여
              run: chmod +x gradlew

            # 프론트엔드 빌드를 위한 Node.js 설치
            - name: Node.js 설치
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            # 프론트엔드 의존성 설치 및 빌드
            - name: 프론트엔드 설치 및 빌드
              working-directory: ./frontend
              run: |
                  npm ci
                  CI=false npm run build

            # 빌드된 정적 파일을 Spring Boot 프로젝트에 복사
            - name: React 빌드 결과물을 Spring static 폴더로 복사
              run: |
                  mkdir -p ./src/main/resources/static
                  rm -rf ./src/main/resources/static/*
                  cp -r ./frontend/build/* ./src/main/resources/static/

            # 백엔드 JAR 빌드 (테스트 제외)
            - name: Spring Boot 빌드
              run: ./gradlew clean build -x test -Dspring.profiles.active=ci

            # 한국 시간 기준 태그 생성
            - name: Docker 태그 설정 (KST 기준)
              id: set_tag
              run: echo "tag_time=$(TZ=Asia/Seoul date +'%Y-%m-%d-%H%M')" >> $GITHUB_OUTPUT

            # DockerHub 로그인
            - name: DockerHub 로그인
              run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Docker 이미지 빌드
            - name: Docker 이미지 빌드
              run: |
                  docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-app:latest \
                               -t ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ steps.set_tag.outputs.tag_time }} .

            # Docker 이미지 푸시
            - name: Docker 이미지 푸시
              run: |
                  docker push ${{ secrets.DOCKER_USERNAME }}/spring-app:latest
                  docker push ${{ secrets.DOCKER_USERNAME }}/spring-app:${{ steps.set_tag.outputs.tag_time }}
