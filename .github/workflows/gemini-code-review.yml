name: Gemini Code Review

on:
  push:
    branches: [ main, dev-main ]
    paths:
      - 'src/**'
  pull_request:
    types: [opened, synchronize]

jobs:
  gemini-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4

      - name: Install dependencies
        run: |
          npm install @google/generative-ai

      - name: Generate git diff (Pull Request)
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          git diff --unified=0 origin/${{ github.event.pull_request.base.ref }} > diff.txt
          echo "EVENT_TYPE=pull_request" >> $GITHUB_ENV

      - name: Generate git diff (Push)
        if: github.event_name == 'push'
        run: |
          git diff --unified=0 HEAD^ HEAD > diff.txt
          echo "EVENT_TYPE=push" >> $GITHUB_ENV

      - name: Run Gemini-1.5-flash Code Review
        id: gemini_review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const diff_output = fs.readFileSync('diff.txt', 'utf8');

            const { GoogleGenerativeAI } = require('@google/generative-ai');
            const genAI = new GoogleGenerativeAI('${{ secrets.GEMINI_API_KEY }}');
            const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

            let prompt = `
            You are a senior engineer performing a pull request code review. 
            Carefully review the provided git diff.

            Review rules (strictly follow!):
            - Language: Only Korean.
            - Format: Strict JSON array. No Markdown.
            - Each item must contain exactly "path", "line", "text", "side".
            - Do not include any backslashes (\\) or unescaped special characters.
            - Always escape special characters like double-quotes.
            - Ensure your output is strictly parsable as JSON.

            Git Diff:
            <git-diff>${diff_output}</git-diff>

            Output Example (Follow this exactly!):
            [
              {
                "path": "src/example.java",
                "line": 10,
                "text": "변수명이 명확하지 않습니다. 수정해주세요.",
                "side": "RIGHT"
              }
            ]`;

            const result = await model.generateContent(prompt);
            const response = await result.response;
            const text = response.text();

            fs.writeFileSync('review_result.txt', text);

      - name: Debug Gemini Output
        if: env.EVENT_TYPE == 'pull_request'
        run: |
          echo "===== Gemini Raw Output ====="
          cat review_result.txt
          echo "============================="

      - name: Add Pull Request Comments
        if: env.EVENT_TYPE == 'pull_request'
        run: |
          comments=$(sed -n '/^\[/,/^\]/p' review_result.txt | tr -d '\n')
          comments=$(python3 -c 'import sys,json; data=sys.stdin.read();\ntry:\n  print(json.dumps(json.loads(data)))\nexcept json.JSONDecodeError:\n  print("[]")' <<< "$comments")
          echo "comments=$comments" >> $GITHUB_ENV

      - name: Post PR review comments
        if: env.EVENT_TYPE == 'pull_request'
        uses: nbaztec/add-pr-review-comment@v1.0.7
        with:
          comments: ${{ env.comments }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allow-repeats: false

      - name: Display review results
        if: env.EVENT_TYPE == 'push'
        run: |
          echo "Gemini Code Review Summary:"
          cat review_result.txt

      - name: Upload review results
        if: env.EVENT_TYPE == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: gemini-code-review
          path: review_result.txt
